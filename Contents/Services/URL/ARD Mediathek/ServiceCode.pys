import urlparse

ARD_VIDEO_FORMATS = ['S',    'M',    'L']
ARD_FMT =           ['0',    '1',    '2']
ARD_CONTAINERS =    ['mp4',  'mp4',  'mp4']
ARD_VIDEORES =      ['144',  '288',  '544']
ARD_VIDEOCODEC =    ['h264', 'h264', 'h264']
ARD_AUDIOCODEC =    ['aac',  'aac',  'aac']

RE_MEDIA_STREAMS = Regex('mediaCollection\.addMediaStream\(.*([0-9]+),.*([0-9]+).*,.*"([^"]*)",.*"([^"]*)",.*.*"([^"]*)"\);')


####################################################################################################
def NormalizeURL(url):
  return url

####################################################################################################
def MetadataObjectForURL(url):

  try:
    details = HTML.ElementFromURL(url, cacheTime=CACHE_1HOUR)
  except:
    raise Ex.MediaNotAuthorized
  
  title = details.xpath('//meta[@name="dcterms.title"]/@content')[0]
  Log(title)
  summary = details.xpath('//meta[@name="dcterms.abstract"]/@content')[0]
  thumb = details.xpath('//meta[@itemprop="image"]/@content')[0]
  available = Datetime.ParseDate(details.xpath('//meta[@property="video:release_date"]/@content')[0]).date()
  duration = int(details.xpath('//meta[@property="video:duration"]/@content')[0]) * 1000
  
  return VideoClipObject(
    title = title,
    summary = summary,
    thumb = Resource.ContentsOfURLWithFallback(thumb),
    originally_available_at = available,
    duration = duration
  )

####################################################################################################
def MediaObjectsForURL(url):
  ret = []

  fmts = list(ARD_VIDEO_FORMATS)
  fmts.reverse()

  for fmt in fmts:
    index = ARD_VIDEO_FORMATS.index(fmt)

    ret.append(MediaObject(
      parts = [PartObject(key=Callback(PlayVideo, url=url, default_fmt=fmt))],
      container = ARD_CONTAINERS[index],
      video_codec = ARD_VIDEOCODEC[index],
      audio_codec = ARD_AUDIOCODEC[index],
      video_resolution = ARD_VIDEORES[index],
      optimized_for_streaming = (ARD_CONTAINERS[index] == 'mp4'),
    ))

  return ret

####################################################################################################
@indirect
def PlayVideo(url=None, default_fmt=None):

  if not url:
    return None
  
  try:
    ard_page = HTTP.Request(url, cacheTime=CACHE_1HOUR).content
  except:
    raise Ex.MediaNotAvailable
  
  Log(ard_page)
  streams = RE_MEDIA_STREAMS.findall(ard_page)
  Log(streams)
  
  if not streams:
    raise Ex.MediaNotAvailable

  final_url = ''
  index = ARD_VIDEO_FORMATS.index(default_fmt)
  for s in streams:
    if(s[0] == '1' and s[2] == ''):
      final_url = s[3];
      if(int(s[1]) >= int(ARD_FMT[index]) and final_url != ''):
        break
  
  if final_url=='':
    raise Ex.MediaNotAvailable
  
  Log("VIDEO URL (fmt=%s): %s", default_fmt, final_url)

  return IndirectResponse(VideoClipObject, key=final_url)
